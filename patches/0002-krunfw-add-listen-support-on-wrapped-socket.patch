From 66eb0a84d2e31150a5393f02aa21d789a4ff00a4 Mon Sep 17 00:00:00 2001
From: Sergio Lopez <slp@redhat.com>
Date: Wed, 11 Nov 2020 06:56:42 +0100
Subject: [PATCH 2/9] krunfw: add listen support on wrapped socket

Add control_listen() and control_close() callbacks to vsock transports.
Linked listener socket to a vsock listener socket exposed to the host.
(HACK: used socketpair() callback to do the link)

Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
---
 include/linux/virtio_vsock.h            |  15 ++++
 include/net/af_vsock.h                  |   8 ++
 include/uapi/linux/virtio_vsock.h       |   3 +
 net/socket.c                            |  34 ++++++++
 net/vmw_vsock/af_vsock.c                |  94 +++++++++++++++++++--
 net/vmw_vsock/virtio_transport.c        |   2 +
 net/vmw_vsock/virtio_transport_common.c | 106 ++++++++++++++++++++++++
 7 files changed, 253 insertions(+), 9 deletions(-)

diff --git a/include/linux/virtio_vsock.h b/include/linux/virtio_vsock.h
index dc636b727179..0b07cfb05cf7 100644
--- a/include/linux/virtio_vsock.h
+++ b/include/linux/virtio_vsock.h
@@ -62,6 +62,17 @@ struct virtio_vsock_pkt_info {
 	bool reply;
 };
 
+struct virtio_vsock_pkt_control {
+	u32 remote_cid, remote_port;
+	struct vsock_sock *vsk;
+	struct sockaddr *address;
+	u32 pkt_len;
+	u16 type;
+	u16 op;
+	u32 flags;
+	bool reply;
+};
+
 struct virtio_transport {
 	/* This must be the first field */
 	struct vsock_transport transport;
@@ -146,4 +157,8 @@ u32 virtio_transport_get_credit(struct virtio_vsock_sock *vvs, u32 wanted);
 void virtio_transport_put_credit(struct virtio_vsock_sock *vvs, u32 credit);
 void virtio_transport_deliver_tap_pkt(struct virtio_vsock_pkt *pkt);
 
+int virtio_transport_control_connect(struct vsock_sock *vsk,
+				     struct sockaddr *address,
+				     size_t len);
+
 #endif /* _LINUX_VIRTIO_VSOCK_H */
diff --git a/include/net/af_vsock.h b/include/net/af_vsock.h
index b1c717286993..20496229bd38 100644
--- a/include/net/af_vsock.h
+++ b/include/net/af_vsock.h
@@ -30,6 +30,10 @@ struct vsock_sock {
 	const struct vsock_transport *transport;
 	struct sockaddr_vm local_addr;
 	struct sockaddr_vm remote_addr;
+	/* Wrapped addresses, used for impersonation. */
+	struct sockaddr_storage wr_local_addr;
+	struct sockaddr_storage wr_remote_addr;
+	sa_family_t wr_sa_family;
 	/* Links for the global tables of bound and connected sockets. */
 	struct list_head bound_table;
 	struct list_head connected_table;
@@ -162,6 +166,10 @@ struct vsock_transport {
 
 	/* Addressing. */
 	u32 (*get_local_cid)(void);
+
+	/* Control functions. */
+	int (*control_connect)(struct vsock_sock *,
+			       struct sockaddr *, size_t);
 };
 
 /**** CORE ****/
diff --git a/include/uapi/linux/virtio_vsock.h b/include/uapi/linux/virtio_vsock.h
index 1d57ed3d84d2..76bf2d5a8544 100644
--- a/include/uapi/linux/virtio_vsock.h
+++ b/include/uapi/linux/virtio_vsock.h
@@ -83,6 +83,9 @@ enum virtio_vsock_op {
 	VIRTIO_VSOCK_OP_CREDIT_UPDATE = 6,
 	/* Request the peer to send the credit info to us */
 	VIRTIO_VSOCK_OP_CREDIT_REQUEST = 7,
+
+        /* Connect request with extended parameters */
+	VIRTIO_VSOCK_OP_REQUEST_EX = 8,
 };
 
 /* VIRTIO_VSOCK_OP_SHUTDOWN flags values */
diff --git a/net/socket.c b/net/socket.c
index 976426d03f09..b8f962a40b7e 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -104,6 +104,7 @@
 #include <linux/sockios.h>
 #include <net/busy_poll.h>
 #include <linux/errqueue.h>
+#include <linux/un.h>
 
 #ifdef CONFIG_NET_RX_BUSY_POLL
 unsigned int sysctl_net_busy_read __read_mostly;
@@ -1853,6 +1854,39 @@ int __sys_connect_file(struct file *file, struct sockaddr_storage *address,
 
 	err = sock->ops->connect(sock, (struct sockaddr *)address, addrlen,
 				 sock->file->f_flags | file_flags);
+
+	if (err && (address->ss_family == AF_UNIX || address->ss_family == AF_INET)) {
+		struct socket *vsock;
+		int ret;
+		int addr_len;
+
+		printk("attempting to impersonate with a VSOCK");
+
+		ret = sock_create(AF_VSOCK, SOCK_STREAM, 0, &vsock);
+		if (ret < 0)
+			goto out;
+
+		if (address->ss_family == AF_UNIX) {
+			addr_len = sizeof(struct sockaddr_un);
+		} else {
+			addr_len = sizeof(struct sockaddr_in);
+		}
+
+		ret = vsock->ops->connect(vsock, (struct sockaddr *)address,
+		    addr_len, /*sock->file->f_flags | file_flags*/ 0);
+		if (ret == 0 /*|| err == -EINPROGRESS*/) {
+			printk("VSOCK conn impersonated");
+			vsock->file = sock->file;
+			vsock->file->private_data = vsock;
+			err = ret;
+			//sock->file = NULL;
+			//sock_release(sock);
+		} else {
+			printk("failed to establish VSOCK conn: %d", ret);
+			sock_release(vsock);
+		}
+	}
+
 out:
 	return err;
 }
diff --git a/net/vmw_vsock/af_vsock.c b/net/vmw_vsock/af_vsock.c
index 626bf9044418..8b16124590ed 100644
--- a/net/vmw_vsock/af_vsock.c
+++ b/net/vmw_vsock/af_vsock.c
@@ -107,6 +107,8 @@
 #include <linux/unistd.h>
 #include <linux/wait.h>
 #include <linux/workqueue.h>
+#include <linux/un.h>
+#include <linux/in.h>
 #include <net/sock.h>
 #include <net/af_vsock.h>
 
@@ -860,6 +862,37 @@ vsock_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
 	return err;
 }
 
+static int vsock_getname_wrapped(struct socket *sock, struct vsock_sock *vsk,
+			 struct sockaddr *addr, int peer)
+{
+	int addr_len;
+	struct sockaddr_storage *wr_addr;
+
+	if (peer) {
+		if (sock->state != SS_CONNECTED) {
+			return -ENOTCONN;
+		}
+		wr_addr = &vsk->wr_remote_addr;
+	} else {
+		wr_addr = &vsk->wr_local_addr;
+	}
+
+	if (!wr_addr) {
+		return -EINVAL;
+	}
+
+	if (vsk->wr_sa_family == AF_UNIX) {
+		addr_len = sizeof(struct sockaddr_un);
+	} else {
+		addr_len = sizeof(struct sockaddr_in);
+	}
+
+	memcpy(addr, wr_addr, addr_len);
+
+	return addr_len;
+}
+
+
 static int vsock_getname(struct socket *sock,
 			 struct sockaddr *addr, int peer)
 {
@@ -874,6 +907,11 @@ static int vsock_getname(struct socket *sock,
 
 	lock_sock(sk);
 
+	if (vsk->wr_sa_family) {
+		err = vsock_getname_wrapped(sock, vsk, addr, peer);
+		goto out;
+	}
+
 	if (peer) {
 		if (sock->state != SS_CONNECTED) {
 			err = -ENOTCONN;
@@ -1251,7 +1289,7 @@ static int vsock_stream_connect(struct socket *sock, struct sockaddr *addr,
 	struct sock *sk;
 	struct vsock_sock *vsk;
 	const struct vsock_transport *transport;
-	struct sockaddr_vm *remote_addr;
+	struct sockaddr_vm *remote_addr = NULL;
 	long timeout;
 	DEFINE_WAIT(wait);
 
@@ -1279,15 +1317,48 @@ static int vsock_stream_connect(struct socket *sock, struct sockaddr *addr,
 		err = -EALREADY;
 		break;
 	default:
-		if ((sk->sk_state == TCP_LISTEN) ||
-		    vsock_addr_cast(addr, addr_len, &remote_addr) != 0) {
+		if (sk->sk_state == TCP_LISTEN) {
 			err = -EINVAL;
 			goto out;
 		}
 
-		/* Set the remote address that we are connecting to. */
-		memcpy(&vsk->remote_addr, remote_addr,
-		       sizeof(vsk->remote_addr));
+		if (addr->sa_family == AF_UNIX || addr->sa_family == AF_INET) {
+			/* Fabricate a fake remote_addr */
+			vsk->remote_addr.svm_family = AF_VSOCK;
+			vsk->remote_addr.svm_cid = 2;
+			vsk->remote_addr.svm_port = 1234;
+			vsk->wr_sa_family = addr->sa_family;
+			if (vsk->wr_sa_family == AF_UNIX) {
+				if (addr_len != sizeof(struct sockaddr_un)) {
+					printk("XXX - invalid unix addr len");
+					err = -EINVAL;
+					goto out;
+				}
+				memcpy(&vsk->wr_remote_addr, addr, addr_len);
+			} else {
+				struct sockaddr_in *local_addr;
+				if (addr_len != sizeof(struct sockaddr_in)) {
+					printk("XXX - invalid inet addr len");
+					err = -EINVAL;
+					goto out;
+				}
+				memcpy(&vsk->wr_remote_addr, addr, addr_len);
+
+				local_addr = (struct sockaddr_in *) &vsk->wr_local_addr;
+				local_addr->sin_family = AF_INET;
+				local_addr->sin_port = htons(1234);
+				local_addr->sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+			}
+		} else {
+			if (vsock_addr_cast(addr, addr_len, &remote_addr) != 0) {
+				err = -EINVAL;
+				goto out;
+			}
+
+			/* Set the remote address that we are connecting to. */
+			memcpy(&vsk->remote_addr, remote_addr,
+			    sizeof(vsk->remote_addr));
+		}
 
 		err = vsock_assign_transport(vsk, NULL);
 		if (err)
@@ -1299,8 +1370,9 @@ static int vsock_stream_connect(struct socket *sock, struct sockaddr *addr,
 		 * endpoints.
 		 */
 		if (!transport ||
-		    !transport->stream_allow(remote_addr->svm_cid,
-					     remote_addr->svm_port)) {
+		    (remote_addr &&
+			!transport->stream_allow(remote_addr->svm_cid,
+			    remote_addr->svm_port))) {
 			err = -ENETUNREACH;
 			goto out;
 		}
@@ -1311,7 +1383,11 @@ static int vsock_stream_connect(struct socket *sock, struct sockaddr *addr,
 
 		sk->sk_state = TCP_SYN_SENT;
 
-		err = transport->connect(vsk);
+		if (addr->sa_family == AF_VSOCK) {
+			err = transport->connect(vsk);
+		} else {
+			err = transport->control_connect(vsk, addr, addr_len);
+		}
 		if (err < 0)
 			goto out;
 
diff --git a/net/vmw_vsock/virtio_transport.c b/net/vmw_vsock/virtio_transport.c
index 2700a63ab095..cdc7639939e2 100644
--- a/net/vmw_vsock/virtio_transport.c
+++ b/net/vmw_vsock/virtio_transport.c
@@ -480,6 +480,8 @@ static struct virtio_transport virtio_transport = {
 		.notify_send_pre_enqueue  = virtio_transport_notify_send_pre_enqueue,
 		.notify_send_post_enqueue = virtio_transport_notify_send_post_enqueue,
 		.notify_buffer_size       = virtio_transport_notify_buffer_size,
+
+		.control_connect          = virtio_transport_control_connect,
 	},
 
 	.send_pkt = virtio_transport_send_pkt,
diff --git a/net/vmw_vsock/virtio_transport_common.c b/net/vmw_vsock/virtio_transport_common.c
index 0edda1edf988..cbd44c47d772 100644
--- a/net/vmw_vsock/virtio_transport_common.c
+++ b/net/vmw_vsock/virtio_transport_common.c
@@ -92,6 +92,50 @@ virtio_transport_alloc_pkt(struct virtio_vsock_pkt_info *info,
 	return NULL;
 }
 
+static struct virtio_vsock_pkt *
+virtio_transport_alloc_pkt_control(struct virtio_vsock_pkt_control *control,
+				   size_t len,
+				   u32 src_cid,
+				   u32 src_port,
+				   u32 dst_cid,
+				   u32 dst_port)
+{
+	struct virtio_vsock_pkt *pkt;
+
+	pkt = kzalloc(sizeof(*pkt), GFP_KERNEL);
+	if (!pkt)
+		return NULL;
+
+	pkt->hdr.type		= cpu_to_le16(control->type);
+	pkt->hdr.op		= cpu_to_le16(control->op);
+	pkt->hdr.src_cid	= cpu_to_le64(src_cid);
+	pkt->hdr.dst_cid	= cpu_to_le64(dst_cid);
+	pkt->hdr.src_port	= cpu_to_le32(src_port);
+	pkt->hdr.dst_port	= cpu_to_le32(dst_port);
+	pkt->hdr.flags		= cpu_to_le32(control->flags);
+	pkt->len		= len;
+	pkt->hdr.len		= cpu_to_le32(len);
+	pkt->reply		= control->reply;
+	pkt->vsk		= control->vsk;
+
+	/* XXX - if address is aligned, we could probably use an indirect descriptor
+	   here to avoid the bounce buffer */
+	if (control->address && len > 0) {
+		pkt->buf = kmalloc(len, GFP_KERNEL);
+		if (!pkt->buf)
+			goto out_pkt;
+
+		pkt->buf_len = len;
+
+		memcpy(pkt->buf, control->address, len);
+	}
+	return pkt;
+
+out_pkt:
+	kfree(pkt);
+	return NULL;
+}
+
 /* Packet capture */
 static struct sk_buff *virtio_transport_build_skb(void *opaque)
 {
@@ -219,6 +263,52 @@ static int virtio_transport_send_pkt_info(struct vsock_sock *vsk,
 	return t_ops->send_pkt(pkt);
 }
 
+static int virtio_transport_send_pkt_control(struct vsock_sock *vsk,
+					     struct virtio_vsock_pkt_control *control)
+{
+	u32 src_cid, src_port, dst_cid, dst_port;
+	const struct virtio_transport *t_ops;
+	struct virtio_vsock_sock *vvs;
+	struct virtio_vsock_pkt *pkt;
+	u32 pkt_len = control->pkt_len;
+
+	t_ops = virtio_transport_get_ops(vsk);
+	if (unlikely(!t_ops))
+		return -EFAULT;
+
+	src_cid = t_ops->transport.get_local_cid();
+	src_port = vsk->local_addr.svm_port;
+	if (!control->remote_cid) {
+		dst_cid	= vsk->remote_addr.svm_cid;
+		dst_port = vsk->remote_addr.svm_port;
+	} else {
+		dst_cid = control->remote_cid;
+		dst_port = control->remote_port;
+	}
+
+	vvs = vsk->trans;
+
+	/* we can send less than pkt_len bytes */
+	if (pkt_len > VIRTIO_VSOCK_MAX_PKT_BUF_SIZE)
+		pkt_len = VIRTIO_VSOCK_MAX_PKT_BUF_SIZE;
+
+	/* virtio_transport_get_credit might return less than pkt_len credit */
+	/* XXX - Control messages should ignore credit */
+	/* pkt_len = virtio_transport_get_credit(vvs, pkt_len); */
+
+	pkt = virtio_transport_alloc_pkt_control(control, pkt_len,
+						 src_cid, src_port,
+						 dst_cid, dst_port);
+	if (!pkt) {
+		virtio_transport_put_credit(vvs, pkt_len);
+		return -ENOMEM;
+	}
+
+	virtio_transport_inc_tx_pkt(vvs, pkt);
+
+	return t_ops->send_pkt(pkt);
+}
+
 static bool virtio_transport_inc_rx_pkt(struct virtio_vsock_sock *vvs,
 					struct virtio_vsock_pkt *pkt)
 {
@@ -632,6 +722,22 @@ int virtio_transport_connect(struct vsock_sock *vsk)
 }
 EXPORT_SYMBOL_GPL(virtio_transport_connect);
 
+int virtio_transport_control_connect(struct vsock_sock *vsk,
+                   struct sockaddr *address,
+                   size_t len)
+{
+	struct virtio_vsock_pkt_control control = {
+		.op = VIRTIO_VSOCK_OP_REQUEST_EX,
+		.type = VIRTIO_VSOCK_TYPE_STREAM,
+		.address = address,
+		.pkt_len = len,
+		.vsk = vsk,
+	};
+
+	return virtio_transport_send_pkt_control(vsk, &control);
+}
+EXPORT_SYMBOL_GPL(virtio_transport_control_connect);
+
 int virtio_transport_shutdown(struct vsock_sock *vsk, int mode)
 {
 	struct virtio_vsock_pkt_info info = {
-- 
2.28.0

