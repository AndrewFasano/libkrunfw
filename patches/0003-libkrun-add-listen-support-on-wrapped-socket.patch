From 52efea860dc2fee2ada84e58b85b8c0e917811d7 Mon Sep 17 00:00:00 2001
From: Stefano Garzarella <sgarzare@redhat.com>
Date: Fri, 5 Jun 2020 12:29:07 +0200
Subject: [PATCH 3/4] libkrun: add listen support on wrapped socket

Add control_listen() and control_close() callbacks to vsock transports.
Linked listener socket to a vsock listener socket exposed to the host.
(HACK: used socketpair() callback to do the link)

Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
---
 include/linux/virtio_vsock.h            |   3 +
 include/net/af_vsock.h                  |   4 +
 include/net/sock.h                      |   1 +
 include/uapi/linux/virtio_vsock.h       |   6 +
 net/socket.c                            | 139 +++++++++++++++++++++++-
 net/vmw_vsock/af_vsock.c                |  64 ++++++++++-
 net/vmw_vsock/virtio_transport.c        |  39 +++++++
 net/vmw_vsock/virtio_transport_common.c |  33 +++++-
 8 files changed, 281 insertions(+), 8 deletions(-)

diff --git a/include/linux/virtio_vsock.h b/include/linux/virtio_vsock.h
index 0b07cfb05..6a7e34227 100644
--- a/include/linux/virtio_vsock.h
+++ b/include/linux/virtio_vsock.h
@@ -160,5 +160,8 @@ void virtio_transport_deliver_tap_pkt(struct virtio_vsock_pkt *pkt);
 int virtio_transport_control_connect(struct vsock_sock *vsk,
 				     struct sockaddr *address,
 				     size_t len);
+int virtio_transport_control_no_sock(const struct virtio_transport *t,
+				     struct virtio_vsock_pkt_control *control,
+				     u32 src_cid, u32 src_port);
 
 #endif /* _LINUX_VIRTIO_VSOCK_H */
diff --git a/include/net/af_vsock.h b/include/net/af_vsock.h
index 20496229b..9a094eea6 100644
--- a/include/net/af_vsock.h
+++ b/include/net/af_vsock.h
@@ -68,6 +68,7 @@ struct vsock_sock {
 	u32 peer_shutdown;
 	bool sent_request;
 	bool ignore_connecting_rst;
+	struct socket *wrapped_socket;
 
 	/* Protected by lock_sock(sk) */
 	u64 buffer_size;
@@ -170,6 +171,9 @@ struct vsock_transport {
 	/* Control functions. */
 	int (*control_connect)(struct vsock_sock *,
 			       struct sockaddr *, size_t);
+	int (*control_listen)(struct vsock_sock *,
+			      struct sockaddr *, size_t);
+	int (*control_close)(struct vsock_sock *);
 };
 
 /**** CORE ****/
diff --git a/include/net/sock.h b/include/net/sock.h
index 1183507df..f823f72e5 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -519,6 +519,7 @@ struct sock {
 	struct bpf_sk_storage __rcu	*sk_bpf_storage;
 #endif
 	struct rcu_head		sk_rcu;
+	struct socket           *sk_vsock;
 };
 
 enum sk_pacing {
diff --git a/include/uapi/linux/virtio_vsock.h b/include/uapi/linux/virtio_vsock.h
index 76bf2d5a8..788c1f57a 100644
--- a/include/uapi/linux/virtio_vsock.h
+++ b/include/uapi/linux/virtio_vsock.h
@@ -86,6 +86,12 @@ enum virtio_vsock_op {
 
         /* Connect request with extended parameters */
 	VIRTIO_VSOCK_OP_REQUEST_EX = 8,
+
+	/* Listen request for wrapped socket */
+	VIRTIO_VSOCK_OP_WRAP_LISTEN = 9,
+
+	/* Close request for wrapped socket */
+        VIRTIO_VSOCK_OP_WRAP_CLOSE = 10,
 };
 
 /* VIRTIO_VSOCK_OP_SHUTDOWN flags values */
diff --git a/net/socket.c b/net/socket.c
index b8f962a40..e934e2699 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -95,6 +95,7 @@
 #include <net/cls_cgroup.h>
 
 #include <net/sock.h>
+#include <net/af_vsock.h>
 #include <linux/netfilter.h>
 
 #include <linux/if_tun.h>
@@ -598,6 +599,11 @@ EXPORT_SYMBOL(sock_alloc);
 
 static void __sock_release(struct socket *sock, struct inode *inode)
 {
+	if (sock->sk && sock->sk->sk_vsock) {
+		sock_release(sock->sk->sk_vsock);
+		sock->sk->sk_vsock = NULL;
+	}
+
 	if (sock->ops) {
 		struct module *owner = sock->ops->owner;
 
@@ -1251,6 +1257,7 @@ static __poll_t sock_poll(struct file *file, poll_table *wait)
 {
 	struct socket *sock = file->private_data;
 	__poll_t events = poll_requested_events(wait), flag = 0;
+	struct socket *vsock = sock->sk->sk_vsock;
 
 	if (!sock->ops->poll)
 		return 0;
@@ -1264,7 +1271,13 @@ static __poll_t sock_poll(struct file *file, poll_table *wait)
 		flag = POLL_BUSY_LOOP;
 	}
 
-	return sock->ops->poll(file, sock, wait) | flag;
+
+	events = sock->ops->poll(file, sock, wait) | flag;
+
+	if (vsock)
+		events |= vsock->ops->poll(file, vsock, wait);
+
+	return events;
 }
 
 static int sock_mmap(struct file *file, struct vm_area_struct *vma)
@@ -1669,6 +1682,55 @@ SYSCALL_DEFINE3(bind, int, fd, struct sockaddr __user *, umyaddr, int, addrlen)
 	return __sys_bind(fd, umyaddr, addrlen);
 }
 
+static void libkip_listen(struct socket *sock, int backlog)
+{
+	struct sockaddr_storage address;
+	struct sockaddr_vm addr_vsock;
+	struct socket *vsock;
+	int err;
+
+	err = sock->ops->getname(sock, (struct sockaddr *)&address, 0);
+	if (err < 0) {
+		return;
+	}
+
+	sock->sk->sk_vsock = NULL;
+
+	if (!(address.ss_family == AF_UNIX || address.ss_family == AF_INET))
+		return;
+
+	printk("listen: attempting to impersonate with a VSOCK\n");
+
+	err = sock_create(AF_VSOCK, SOCK_STREAM, 0, &vsock);
+	if (err < 0)
+		return;
+
+	addr_vsock.svm_family = AF_VSOCK;
+	addr_vsock.svm_cid = VMADDR_CID_ANY;
+	addr_vsock.svm_port = VMADDR_PORT_ANY;
+
+	err = vsock->ops->bind(vsock, (struct sockaddr *)&addr_vsock,
+			      sizeof(addr_vsock));
+	if (err < 0)
+		goto out;
+
+	err = vsock->ops->listen(vsock, backlog);
+	if (err < 0)
+		goto out;
+
+	/* HACK */
+	err = vsock->ops->socketpair(vsock, sock);
+	if (err < 0)
+		goto out;
+
+	sock->sk->sk_vsock = vsock;
+	printk("listen: VSOCK impersonation done!\n");
+
+	return;
+out:
+	printk("listen: VSOCK impersonation FAILED! err:%d\n", err);
+	sock_release(vsock);
+}
 /*
  *	Perform a listen. Basically, we allow the protocol to do anything
  *	necessary for a listen, and if that works, we mark the socket as
@@ -1691,6 +1753,9 @@ int __sys_listen(int fd, int backlog)
 		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
+		if (!err)
+			libkip_listen(sock, backlog);
+
 		fput_light(sock->file, fput_needed);
 	}
 	return err;
@@ -1710,6 +1775,7 @@ int __sys_accept4_file(struct file *file, unsigned file_flags,
 	struct file *newfile;
 	int err, len, newfd;
 	struct sockaddr_storage address;
+	struct socket *vsock;
 
 	if (flags & ~(SOCK_CLOEXEC | SOCK_NONBLOCK))
 		return -EINVAL;
@@ -1752,8 +1818,71 @@ int __sys_accept4_file(struct file *file, unsigned file_flags,
 	if (err)
 		goto out_fd;
 
-	err = sock->ops->accept(sock, newsock, sock->file->f_flags | file_flags,
+	vsock = sock->sk->sk_vsock;
+
+	if (vsock) {
+		long timeout = sock_rcvtimeo(sock->sk, flags & O_NONBLOCK);
+		DEFINE_WAIT(wait);
+		int waiting = 1;
+		struct socket *newvsock;
+		struct file *newvfile;
+
+		printk("accept: vsock wrapping %p\n", vsock);
+
+		newvsock = sock_alloc();
+		if (!newsock)
+			goto out;
+
+		newvsock->type = vsock->type;
+		newvsock->ops = vsock->ops;
+
+		newvfile = sock_alloc_file(newvsock, flags, vsock->sk->sk_prot_creator->name);
+		if (IS_ERR(newvfile)) {
+			err = PTR_ERR(newvfile);
+			put_unused_fd(newfd);
+			goto out;
+		}
+
+		file_flags |= O_NONBLOCK;
+
+		prepare_to_wait(sk_sleep(sock->sk), &wait, TASK_INTERRUPTIBLE);
+		prepare_to_wait(sk_sleep(vsock->sk), &wait, TASK_INTERRUPTIBLE);
+
+		while (waiting) {
+			err = sock->ops->accept(sock, newsock,
+					sock->file->f_flags | file_flags,
 					false);
+			if (err >= 0 || err != -EAGAIN) {
+				break;
+			}
+
+			err = vsock->ops->accept(vsock, newvsock,
+					sock->file->f_flags | file_flags,
+					false);
+			if (err >= 0 || err != -EAGAIN) {
+				newsock = newvsock;
+				newfile = newvfile;
+				break;
+			}
+
+			timeout = schedule_timeout(timeout);
+			if (signal_pending(current)) {
+				err = sock_intr_errno(timeout);
+				break;
+			} else if (timeout == 0) {
+				err = -EAGAIN;
+				break;
+			}
+		}
+
+		finish_wait(sk_sleep(sock->sk), &wait);
+		finish_wait(sk_sleep(vsock->sk), &wait);
+	} else {
+		err = sock->ops->accept(sock, newsock,
+					sock->file->f_flags | file_flags,
+					false);
+	}
+
 	if (err < 0)
 		goto out_fd;
 
@@ -1860,7 +1989,7 @@ int __sys_connect_file(struct file *file, struct sockaddr_storage *address,
 		int ret;
 		int addr_len;
 
-		printk("attempting to impersonate with a VSOCK");
+		printk("attempting to impersonate with a VSOCK\n");
 
 		ret = sock_create(AF_VSOCK, SOCK_STREAM, 0, &vsock);
 		if (ret < 0)
@@ -1875,14 +2004,14 @@ int __sys_connect_file(struct file *file, struct sockaddr_storage *address,
 		ret = vsock->ops->connect(vsock, (struct sockaddr *)address,
 		    addr_len, /*sock->file->f_flags | file_flags*/ 0);
 		if (ret == 0 /*|| err == -EINPROGRESS*/) {
-			printk("VSOCK conn impersonated");
+			printk("VSOCK conn impersonated\n");
 			vsock->file = sock->file;
 			vsock->file->private_data = vsock;
 			err = ret;
 			//sock->file = NULL;
 			//sock_release(sock);
 		} else {
-			printk("failed to establish VSOCK conn: %d", ret);
+			printk("failed to establish VSOCK conn: %d\n", ret);
 			sock_release(vsock);
 		}
 	}
diff --git a/net/vmw_vsock/af_vsock.c b/net/vmw_vsock/af_vsock.c
index 8b1612459..f0fa81866 100644
--- a/net/vmw_vsock/af_vsock.c
+++ b/net/vmw_vsock/af_vsock.c
@@ -587,6 +587,59 @@ static void vsock_pending_work(struct work_struct *work)
 	sock_put(listener);
 }
 
+static int vsock_wrap_listen(struct socket *vsock, struct socket *sock)
+{
+	struct sockaddr_in * local_addr;
+	struct sockaddr_storage addr;
+	struct vsock_sock *vsk;
+	struct sock *sk;
+	int err, addr_len = 0;
+
+	sk = vsock->sk;
+	if (sk->sk_state != TCP_LISTEN ||
+	    !transport_g2h || !transport_g2h->control_listen)
+		return -EINVAL;
+
+	vsk = vsock_sk(sk);
+
+	err = sock->ops->getname(sock, (struct sockaddr *) &addr, 0);
+	if (err < 0)
+		return err;
+
+	if (addr.ss_family == AF_UNIX) {
+		addr_len = sizeof(struct sockaddr_un);
+	} else if (addr.ss_family == AF_INET) {
+		addr_len = sizeof(struct sockaddr_in);
+	} else {
+		return -EINVAL;
+	}
+
+	vsk->wr_sa_family = addr.ss_family;
+	memcpy(&vsk->wr_remote_addr, &addr, addr_len);
+
+	local_addr = (struct sockaddr_in *) &vsk->wr_local_addr;
+	local_addr->sin_family = AF_INET;
+	local_addr->sin_port = htons(1234);
+	local_addr->sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+
+	err = transport_g2h->control_listen(vsk, (struct sockaddr *) &addr, addr_len);
+	if (err < 0)
+		return err;
+
+	vsk->wrapped_socket = sock;
+
+	return 0;
+}
+
+static void vsock_wrap_close(struct vsock_sock *vsk)
+{
+	if (!transport_g2h || !transport_g2h->control_close)
+		return;
+
+	(void)transport_g2h->control_close(vsk);
+	vsk->wrapped_socket = NULL;
+}
+
 /**** SOCKET OPERATIONS ****/
 
 static int __vsock_bind_stream(struct vsock_sock *vsk,
@@ -768,6 +821,9 @@ static void __vsock_release(struct sock *sk, int level)
 		 */
 		lock_sock_nested(sk, level);
 
+		if (vsk->wrapped_socket)
+			vsock_wrap_close(vsk);
+
 		if (vsk->transport)
 			vsk->transport->release(vsk);
 		else if (sk->sk_type == SOCK_STREAM)
@@ -1456,6 +1512,12 @@ static int vsock_stream_connect(struct socket *sock, struct sockaddr *addr,
 	return err;
 }
 
+/* HACK */
+static int vsock_socketpair(struct socket *sock1, struct socket *sock2)
+{
+	return vsock_wrap_listen(sock1, sock2);
+}
+
 static int vsock_accept(struct socket *sock, struct socket *newsock, int flags,
 			bool kern)
 {
@@ -2062,7 +2124,7 @@ static const struct proto_ops vsock_stream_ops = {
 	.release = vsock_release,
 	.bind = vsock_bind,
 	.connect = vsock_stream_connect,
-	.socketpair = sock_no_socketpair,
+	.socketpair = vsock_socketpair,
 	.accept = vsock_accept,
 	.getname = vsock_getname,
 	.poll = vsock_poll,
diff --git a/net/vmw_vsock/virtio_transport.c b/net/vmw_vsock/virtio_transport.c
index cdc763993..3e06bc621 100644
--- a/net/vmw_vsock/virtio_transport.c
+++ b/net/vmw_vsock/virtio_transport.c
@@ -443,6 +443,10 @@ static void virtio_vsock_rx_done(struct virtqueue *vq)
 	queue_work(virtio_vsock_workqueue, &vsock->rx_work);
 }
 
+static int virtio_transport_control_listen(struct vsock_sock *vsk,
+					   struct sockaddr *address, size_t len);
+static int virtio_transport_control_close(struct vsock_sock *vsk);
+
 static struct virtio_transport virtio_transport = {
 	.transport = {
 		.module                   = THIS_MODULE,
@@ -482,11 +486,46 @@ static struct virtio_transport virtio_transport = {
 		.notify_buffer_size       = virtio_transport_notify_buffer_size,
 
 		.control_connect          = virtio_transport_control_connect,
+		.control_listen           = virtio_transport_control_listen,
+		.control_close            = virtio_transport_control_close,
 	},
 
 	.send_pkt = virtio_transport_send_pkt,
 };
 
+static int virtio_transport_control_listen(struct vsock_sock *vsk,
+					   struct sockaddr *address, size_t len)
+{
+	struct virtio_vsock_pkt_control control = {
+		.op = VIRTIO_VSOCK_OP_WRAP_LISTEN,
+		.type = VIRTIO_VSOCK_TYPE_STREAM,
+		.remote_cid = VMADDR_CID_HOST,
+		.remote_port = 0, /* XXX: is it needed? */
+		.address = address,
+		.pkt_len = len,
+	};
+	u32 src_cid = virtio_transport_get_local_cid();
+	u32 src_port = vsk->local_addr.svm_port;
+
+	return virtio_transport_control_no_sock(&virtio_transport, &control,
+						src_cid, src_port);
+}
+
+static int virtio_transport_control_close(struct vsock_sock *vsk)
+{
+	struct virtio_vsock_pkt_control control = {
+		.op = VIRTIO_VSOCK_OP_WRAP_CLOSE,
+		.type = VIRTIO_VSOCK_TYPE_STREAM,
+		.remote_cid = VMADDR_CID_HOST,
+		.remote_port = 0, /* XXX: is it needed? */
+	};
+	u32 src_cid = virtio_transport_get_local_cid();
+	u32 src_port = vsk->local_addr.svm_port;
+
+	return virtio_transport_control_no_sock(&virtio_transport, &control,
+						src_cid, src_port);
+}
+
 static void virtio_transport_rx_work(struct work_struct *work)
 {
 	struct virtio_vsock *vsock =
diff --git a/net/vmw_vsock/virtio_transport_common.c b/net/vmw_vsock/virtio_transport_common.c
index cbd44c47d..51150b7c1 100644
--- a/net/vmw_vsock/virtio_transport_common.c
+++ b/net/vmw_vsock/virtio_transport_common.c
@@ -263,6 +263,27 @@ static int virtio_transport_send_pkt_info(struct vsock_sock *vsk,
 	return t_ops->send_pkt(pkt);
 }
 
+int virtio_transport_control_no_sock(const struct virtio_transport *t,
+				     struct virtio_vsock_pkt_control *control,
+				     u32 src_cid, u32 src_port)
+{
+	u32 dst_cid, dst_port;
+	struct virtio_vsock_pkt *pkt;
+
+	dst_cid = control->remote_cid;
+	dst_port = control->remote_port;
+
+	pkt = virtio_transport_alloc_pkt_control(control, control->pkt_len,
+						 src_cid, src_port,
+						 dst_cid, dst_port);
+	if (!pkt) {
+		return -ENOMEM;
+	}
+
+	return t->send_pkt(pkt);
+}
+EXPORT_SYMBOL_GPL(virtio_transport_control_no_sock);
+
 static int virtio_transport_send_pkt_control(struct vsock_sock *vsk,
 					     struct virtio_vsock_pkt_control *control)
 {
@@ -294,13 +315,17 @@ static int virtio_transport_send_pkt_control(struct vsock_sock *vsk,
 
 	/* virtio_transport_get_credit might return less than pkt_len credit */
 	/* XXX - Control messages should ignore credit */
-	/* pkt_len = virtio_transport_get_credit(vvs, pkt_len); */
+	//pkt_len = virtio_transport_get_credit(vvs, pkt_len);
+	//if (pkt_len < control->pkt_len) {
+	//	virtio_transport_put_credit(vvs, pkt_len);
+	//	return -ENOMEM;
+	//}
 
 	pkt = virtio_transport_alloc_pkt_control(control, pkt_len,
 						 src_cid, src_port,
 						 dst_cid, dst_port);
 	if (!pkt) {
-		virtio_transport_put_credit(vvs, pkt_len);
+		//virtio_transport_put_credit(vvs, pkt_len);
 		return -ENOMEM;
 	}
 
@@ -1187,6 +1212,10 @@ virtio_transport_recv_listen(struct sock *sk, struct virtio_vsock_pkt *pkt,
 	release_sock(child);
 
 	sk->sk_data_ready(sk);
+
+	if (vsk->wrapped_socket)
+		vsk->wrapped_socket->sk->sk_data_ready(vsk->wrapped_socket->sk);
+
 	return 0;
 }
 
-- 
2.26.2

